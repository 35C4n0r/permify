syntax = "proto3";
package base.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/api/expr/v1alpha1/checked.proto";

option go_package = "github.com/Permify/permify/pkg/pb/base/v1";

// CheckResult
enum CheckResult {
  CHECK_RESULT_UNSPECIFIED = 0;
  CHECK_RESULT_ALLOWED = 1;
  CHECK_RESULT_DENIED = 2;
}

// AttributeType
enum AttributeType {
  ATTRIBUTE_TYPE_UNSPECIFIED = 0;
  ATTRIBUTE_TYPE_BOOLEAN = 1;
  ATTRIBUTE_TYPE_STRING = 2;
  ATTRIBUTE_TYPE_INTEGER = 3;
  ATTRIBUTE_TYPE_DOUBLE = 4;
}

message Context {
  repeated Tuple tuples = 1 [json_name = "tuples"];
  repeated Attribute attributes = 2 [json_name = "attributes"];
  google.protobuf.Struct data = 3;
}

// Child
message Child {
  oneof type {
    option (validate.required) = true;
    Leaf leaf = 1 [(validate.rules).message.required = true];
    Rewrite rewrite = 2 [(validate.rules).message.required = true];
  }
}

// Leaf
message Leaf {
  oneof type {
    option (validate.required) = true;
    ComputedUserSet computed_user_set = 1 [(validate.rules).message.required = true];
    TupleToUserSet tuple_to_user_set = 2 [(validate.rules).message.required = true];
    ComputedAttribute computed_attribute = 3 [(validate.rules).message.required = true];
    Call call = 4 [(validate.rules).message.required = true];
  }
}

// Rewrite
message Rewrite {
  // Operation
  enum Operation {
    OPERATION_UNSPECIFIED = 0;
    OPERATION_UNION = 1;
    OPERATION_INTERSECTION = 2;
    OPERATION_EXCLUSION = 3;
  }

  Operation rewrite_operation = 1;

  repeated Child children = 2;
}

// SchemaDefinition
message SchemaDefinition {
  // SchemaReference
  enum Reference {
    REFERENCE_UNSPECIFIED = 0;
    REFERENCE_ENTITY = 1;
    REFERENCE_RULE = 2;
  }

  map<string, EntityDefinition> entity_definitions = 1;
  map<string, RuleDefinition> rule_definitions = 2;

  // ["entity_name , rule_name"] => Reference
  map<string, Reference> references = 3;
}

// EntityDefinition
message EntityDefinition {
  // Reference
  enum Reference {
    REFERENCE_UNSPECIFIED = 0;
    REFERENCE_RELATION = 1;
    REFERENCE_PERMISSION = 2;
    REFERENCE_ATTRIBUTE = 3;
  }

  string name = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];

  // ["relation_name"] => RelationDefinition
  map<string, RelationDefinition> relations = 2;

  // ["permission_name"] => PermissionDefinition
  map<string, PermissionDefinition> permissions = 3;

  // ["attribute_name"] => AttributeDefinition
  map<string, AttributeDefinition> attributes = 4;

  // ["relation_name , permission_name, attribute_name"] => Reference
  map<string, Reference> references = 5;
}

// RuleDefinition
message RuleDefinition {
  string name = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];

  // ["attribute_name"] => AttributeType
  map<string, AttributeType> arguments = 2;

  google.api.expr.v1alpha1.CheckedExpr expression = 3;
}

// RelationDefinition
message AttributeDefinition {
  string name = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];

  AttributeType type = 2;
}

// RelationDefinition
message RelationDefinition {
  string name = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];

  repeated RelationReference relation_references = 2;
}

// PermissionDefinition
message PermissionDefinition {
  string name = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];

  Child child = 2;
}

// RelationReference
message RelationReference {
  string type = 1 [(validate.rules).string = {
    pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes: 64,
  }];

  string relation = 2 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
    ignore_empty: true,
  }];
}

// CallArgument
message CallArgument {
  oneof type {
    ComputedAttribute computed_attribute = 1;
    ContextAttribute context_attribute = 2;
  }
}

// Call
message Call {
  string rule_name = 1;
  repeated CallArgument arguments = 2;
}

// ComputedUserSet
message ComputedAttribute {
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
  }];
}

// ContextAttribute
message ContextAttribute {
  string name = 1 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
  }];
}

// ComputedUserSet
message ComputedUserSet {
  string relation = 1 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
  }];
}

// TupleToUserSet
message TupleToUserSet {
  TupleSet tupleSet = 1;
  ComputedUserSet computed = 2;
}

// TupleSet
message TupleSet {
  string relation = 1 [(validate.rules).string = {
    pattern: "^[a-z][a-z0-9_]{1,62}[a-z0-9]$",
    max_bytes: 64,
  }];
}

// Tuple
message Tuple {
  Entity entity = 1 [
    json_name = "entity",
    (validate.rules).message.required = true
  ];

  string relation = 2 [
    json_name = "relation",
    (validate.rules).string = {
      pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
      max_bytes: 64,
    }
  ];

  Subject subject = 3 [
    json_name = "subject",
    (validate.rules).message.required = true
  ];
}

// Attribute
message Attribute {
  Entity entity = 1 [
    json_name = "entity",
    (validate.rules).message.required = true
  ];

  string attribute = 2 [json_name = "attribute"];

  string type = 3 [json_name = "type"];

  google.protobuf.Any value = 4 [json_name = "value"];
}

// Tuples
message Tuples {
  repeated Tuple tuples = 1 [json_name = "tuples"];
}

// Entity
message Entity {
  string type = 1 [
    json_name = "type",
    (validate.rules).string = {
      pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
      max_bytes: 64,
    }
  ];

  string id = 2 [
    json_name = "id",
    (validate.rules).string = {
      pattern: "^(([a-zA-Z0-9_][a-zA-Z0-9_|-]{0,127})|\\*)$",
      max_bytes: 128,
    }
  ];
}

message EntityAndRelation {
  Entity entity = 1 [
    json_name = "entity",
    (validate.rules).message.required = true
  ];

  string relation = 2 [
    json_name = "relation",
    (validate.rules).string = {
      pattern: "^([a-z][a-z0-9_]{1,64}[a-z0-9])$",
      max_bytes: 64,
    }
  ];
}

// Subject
message Subject {
  string type = 1 [
    json_name = "type",
    (validate.rules).string = {
      pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
      max_bytes: 64,
    }
  ];

  string id = 2 [
    json_name = "id",
    (validate.rules).string = {
      pattern: "^(([a-zA-Z0-9_][a-zA-Z0-9_|-]{0,127})|\\*)$",
      max_bytes: 128,
    }
  ];

  string relation = 3 [
    json_name = "relation",
    (validate.rules).string = {
      pattern: "^([.&a-z][.&a-z0-9_]{1,62}[.&a-z0-9])$",
      max_bytes: 64,
      ignore_empty: true,
    }
  ];
}

// Filters

// AttributesFilter is used to filter attributes
message AttributeFilter {
  EntityFilter entity = 1 [
    json_name = "entity",
    (validate.rules).message.required = true
  ];

  repeated string attributes = 2 [json_name = "attributes"];
}

// TupleFilter is used to filter tuples
message TupleFilter {
  EntityFilter entity = 1 [
    json_name = "entity",
    (validate.rules).message.required = true
  ];

  string relation = 2 [
    json_name = "relation",
    (validate.rules).string = {
      pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
      max_bytes: 64,
      ignore_empty: true,
    }
  ];

  SubjectFilter subject = 3 [json_name = "subject"];
}

// EntityFilter is used to filter entities
message EntityFilter {
  string type = 1 [json_name = "type"];

  repeated string ids = 2 [json_name = "ids"];
}

// SubjectFilter is used to filter subjects
message SubjectFilter {
  string type = 1 [json_name = "type"];

  repeated string ids = 2 [json_name = "ids"];

  string relation = 3 [
    json_name = "relation",
    (validate.rules).string = {
      pattern: "^([.&a-z][.&a-z0-9_]{1,62}[.&a-z0-9])$",
      max_bytes: 64,
      ignore_empty: true,
    }
  ];
}

// ExpandTreeNode
message ExpandTreeNode {
  // Operation
  enum Operation {
    OPERATION_UNSPECIFIED = 0;
    OPERATION_UNION = 1;
    OPERATION_INTERSECTION = 2;
    OPERATION_EXCLUSION = 3;
  }

  Operation operation = 1;

  repeated Expand children = 2;
}

// Expand
message Expand {
  EntityAndRelation target = 1;
  oneof node {
    ExpandTreeNode expand = 2;
    Subjects leaf = 3;
  }
}

// Result
message Subjects {
  repeated Subject subjects = 1 [json_name = "subjects"];
}

// Tenant
message Tenant {
  string id = 1 [json_name = "id"];
  string name = 2 [json_name = "name"];
  google.protobuf.Timestamp created_at = 3 [json_name = "created_at"];
}

// DataChanges
message DataChanges {
  string snap_token = 1 [json_name = "snap_token"];

  repeated DataChange data_changes = 2 [json_name = "data_changes"];
}

// DataChange
message DataChange {
  enum Operation {
    OPERATION_UNSPECIFIED = 0;
    OPERATION_CREATE = 1;
    OPERATION_DELETE = 2;
  }

  Operation operation = 1 [json_name = "operation"];

  oneof type {
    option (validate.required) = true;
    Tuple tuple = 2 [json_name = "tuple"];
    Attribute attribute = 3 [json_name = "attribute"];
  }
}