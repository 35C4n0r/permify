syntax = "proto3";
package base.v1;

option go_package = "github.com/Permify/permify/pkg/pb/base/v1";

import "base/v1/tuple.proto";
import "base/v1/schema.proto";
import "validate/validate.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
//import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// ** PERMISSION SERVICE **

// Permission
service Permission {
  rpc Check(PermissionCheckRequest) returns (PermissionCheckResponse) {
    option (google.api.http) = {
      post: "/v1/permissions/check"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "This method returns a decision about whether user can perform an action on a certain resource. For example, Can the user 1 push to repository 1?"
      tags: [
        "Permission"
      ]
      operation_id: "permissions.check"
    };
  }

  rpc Expand(PermissionExpandRequest) returns (PermissionExpandResponse) {
    option (google.api.http) = {
      post: "/v1/permissions/expand"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "expand relationships according to schema"
      tags: [
        "Permission"
      ]
      operation_id: "permissions.expand"
    };
  }

  rpc LookupSchema(PermissionLookupSchemaRequest) returns (PermissionLookupSchemaResponse) {
    option (google.api.http) = {
      post: "/v1/permissions/lookup-schema"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: ""
      tags: [
        "Permission"
      ]
      operation_id: "permissions.lookupSchema"
    };
  }

  rpc LookupEntity(PermissionLookupEntityRequest) returns (PermissionLookupEntityResponse) {
    option (google.api.http) = {
      post: "/v1/permissions/lookup-entity"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: ""
      tags: [
        "Permission"
      ]
      operation_id: "permissions.lookupEntity"
    };
  }

  rpc LookupEntityStream(PermissionLookupEntityRequest) returns (stream PermissionLookupEntityStreamResponse) {
    option (google.api.http) = {
      post: "/v1/permissions/lookup-entity-stream"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: ""
      tags: [
        "Permission"
      ]
      operation_id: "permissions.lookupEntityStream"
    };
  }
}

// CHECK

// CheckRequest
message PermissionCheckRequest {
  string schema_version = 1 [json_name = "schema_version"];
  string snap_token = 2 [json_name = "snap_token"];

  Entity entity = 3 [json_name = "entity", (validate.rules).message.required = true];

  // its can be action or relation
  string permission = 4 [json_name = "permission", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: false,
  }];

  Subject subject = 5 [json_name = "subject", (validate.rules).message.required = true];

  int32 depth = 6 [json_name = "depth", (validate.rules).int32.gte = 3];
}

// PermissionCheckResponse
message PermissionCheckResponse {
  // Result
  enum Result {
    RESULT_UNKNOWN = 0;
    RESULT_ALLOWED = 1;
    RESULT_DENIED = 2;
  }

  Result can = 1 [json_name = "can"];
  int32 remaining_depth = 3 [json_name = "remaining_depth"];
}

// EXPAND

// PermissionExpandRequest
message PermissionExpandRequest {
  string schema_version = 1 [json_name = "schema_version"];
  string snap_token = 2 [json_name = "snap_token"];

  Entity entity = 3 [json_name = "entity", (validate.rules).message.required = true];

  string permission = 4 [json_name = "permission", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: true,
  }];
}

// PermissionExpandResponse
message PermissionExpandResponse {
  Expand tree = 1 [json_name = "tree"];
}

//LOOKUP

// PermissionLookupSchemaRequest
message PermissionLookupSchemaRequest {
  string schema_version = 1 [json_name = "schema_version"];

  string entity_type = 2 [json_name = "entity_type", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: false,
  }];

  repeated string relation_names = 3 [json_name = "relation_names"];
}

// PermissionLookupSchemaResponse
message PermissionLookupSchemaResponse {
  repeated string action_names = 1 [json_name = "action_names"];
}

// PermissionLookupEntityRequest
message PermissionLookupEntityRequest {
  string schema_version = 1 [json_name = "schema_version"];
  string snap_token = 2 [json_name = "snap_token"];

  string entity_type = 3 [json_name = "entity_type", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: false,
  }];

  string permission = 4 [json_name = "permission", (validate.rules).string = {
    pattern : "^([a-z][a-z0-9_]{1,62}[a-z0-9])$",
    max_bytes : 64,
    ignore_empty: false,
  }];

  Subject subject = 5 [json_name = "subject", (validate.rules).message.required = true];
}

// PermissionLookupEntityResponse
message PermissionLookupEntityResponse {
  repeated string entity_ids = 1 [json_name = "entity_ids"];
}

// PermissionLookupEntityStreamResponse
message PermissionLookupEntityStreamResponse {
  string entity_id = 1 [json_name = "entity_id"];
}

// ** SCHEMA SERVICE **

// Schema
service Schema {
  rpc Write(SchemaWriteRequest) returns (SchemaWriteResponse) {
    option (google.api.http) = {
      post: "/v1/schemas/write"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "write your authorization model"
      tags: [
        "Schema"
      ]
      operation_id: "schemas.write"
    };
  }

  rpc Read(SchemaReadRequest) returns (SchemaReadResponse) {
    option (google.api.http) = {
      post: "/v1/schemas/read"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "read your authorization model"
      tags: [
        "Schema"
      ]
      operation_id: "schemas.read"
    };
  }
}

// WRITE

// SchemaWriteRequest
message SchemaWriteRequest {
  string schema = 1 [json_name = "schema"];
}

// SchemaWriteResponse
message SchemaWriteResponse {
  string schema_version = 1 [json_name = "schema_version"];
}

// READ

// SchemaReadRequest
message SchemaReadRequest {
  string schema_version = 1 [json_name = "schema_version"];
}

// SchemaReadRequest
message SchemaReadResponse {
  IndexedSchema schema = 1 [json_name = "schema"];
}

// ** RELATIONSHIP SERVICE **

// Schema
service Relationship {
  rpc Write(RelationshipWriteRequest) returns (RelationshipWriteResponse) {
    option (google.api.http) = {
      post: "/v1/relationships/write"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create new relation tuple"
      tags: [
        "Relationship"
      ]
      operation_id: "relationships.write"
    };
  }

  rpc Read(RelationshipReadRequest) returns (RelationshipReadResponse) {
    option (google.api.http) = {
      post: "/v1/relationships/read"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "read relation tuple(s)"
      tags: [
        "Relationship"
      ]
      operation_id: "relationships.read"
    };
  }

  rpc Delete(RelationshipDeleteRequest) returns (RelationshipDeleteResponse) {
    option (google.api.http) = {
      post: "/v1/relationships/delete"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete relation tuple"
      tags: [
        "Relationship"
      ]
      operation_id: "relationships.delete"
    };
  }
}

// RelationshipWriteRequest
message RelationshipWriteRequest {
  string schema_version = 1 [json_name = "schema_version"];

  repeated Tuple tuples = 2 [json_name = "tuples", (validate.rules).repeated = {
    min_items : 1,
    max_items : 100,
    items : {
      message : {
        required : true,
      },
    },
  }];
}

// RelationshipWriteResponse
message RelationshipWriteResponse {
  string snap_token = 1 [json_name = "snap_token"];
}

// RelationshipReadRequest
message RelationshipReadRequest {
  string snap_token = 1 [json_name = "snap_token"];

  TupleFilter filter = 2 [json_name = "filter"];
}

// RelationshipReadResponse
message RelationshipReadResponse {
  repeated Tuple tuples = 1 [json_name = "tuples"];
}

// RelationshipDeleteRequest
message RelationshipDeleteRequest {
  TupleFilter filter = 1 [json_name = "filter"];
}

// RelationshipDeleteResponse
message RelationshipDeleteResponse {
  string snap_token = 1 [json_name = "snap_token"];
}