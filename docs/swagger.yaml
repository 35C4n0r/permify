definitions:
  common.HTTPErrorResponse:
    properties:
      errors: {}
    type: object
  common.Message:
    properties:
      message:
        type: string
    type: object
  filters.EntityFilter:
    properties:
      id:
        type: string
      type:
        type: string
    type: object
  filters.RelationTupleFilter:
    properties:
      entity:
        $ref: '#/definitions/filters.EntityFilter'
      relation:
        type: string
      subject:
        $ref: '#/definitions/filters.SubjectFilter'
    type: object
  filters.SubjectFilter:
    properties:
      id:
        type: string
      relation:
        type: string
      type:
        type: string
    type: object
  permission.CheckRequest:
    properties:
      action:
        type: string
      depth:
        type: integer
      entity:
        $ref: '#/definitions/tuple.Entity'
      schema_version:
        type: string
      subject:
        $ref: '#/definitions/tuple.Subject'
    type: object
  permission.CheckResponse:
    properties:
      can:
        type: boolean
      decisions: {}
      remaining_depth:
        type: integer
    type: object
  permission.ExpandRequest:
    properties:
      action:
        type: string
      entity:
        $ref: '#/definitions/tuple.Entity'
      schema_version:
        type: string
    type: object
  permission.ExpandResponse:
    properties:
      tree: {}
    type: object
  permission.LookupQueryRequest:
    properties:
      action:
        type: string
      entity_type:
        type: string
      schema_version:
        type: string
      subject:
        $ref: '#/definitions/tuple.Subject'
    type: object
  permission.LookupQueryResponse:
    properties:
      query:
        type: string
    type: object
  relationship.DeleteRequest:
    properties:
      entity:
        $ref: '#/definitions/tuple.Entity'
      relation:
        type: string
      subject:
        $ref: '#/definitions/tuple.Subject'
    type: object
  relationship.ReadRequest:
    properties:
      filter:
        $ref: '#/definitions/filters.RelationTupleFilter'
    type: object
  relationship.WriteRequest:
    properties:
      entity:
        $ref: '#/definitions/tuple.Entity'
      relation:
        type: string
      schema_version:
        type: string
      subject:
        $ref: '#/definitions/tuple.Subject'
    type: object
  schema.Action:
    properties:
      child: {}
      name:
        type: string
    type: object
  schema.Entity:
    properties:
      actions:
        items:
          $ref: '#/definitions/schema.Action'
        type: array
      name:
        type: string
      option:
        additionalProperties: true
        type: object
      relations:
        items:
          $ref: '#/definitions/schema.Relation'
        type: array
    type: object
  schema.LookupRequest:
    properties:
      entity_type:
        type: string
      relation_names:
        items:
          type: string
        type: array
      schema_version:
        type: string
    type: object
  schema.LookupResponse:
    properties:
      action_names:
        items:
          type: string
        type: array
    type: object
  schema.ReadRequest:
    properties:
      schema_version:
        type: string
    type: object
  schema.ReadResponse:
    properties:
      entities:
        additionalProperties:
          $ref: '#/definitions/schema.Entity'
        type: object
    type: object
  schema.Relation:
    properties:
      name:
        type: string
      option:
        additionalProperties: true
        type: object
      type:
        items:
          type: string
        type: array
    type: object
  schema.WriteResponse:
    properties:
      version:
        type: string
    type: object
  tuple.Entity:
    properties:
      id:
        type: string
      type:
        type: string
    type: object
  tuple.Subject:
    properties:
      id:
        type: string
      relation:
        type: string
      type:
        type: string
    type: object
  tuple.Tuple:
    properties:
      entity:
        $ref: '#/definitions/tuple.Entity'
      relation:
        type: string
      subject:
        $ref: '#/definitions/tuple.Subject'
    type: object
info:
  contact:
    email: hello@permify.co
    name: API Support
    url: https://github.com/Permify/permify/issues
  description: |-
    Permify is an open-source authorization service for creating and maintaining fine-grained authorizations accross your individual applications and services.
    Permify converts authorization data as relational tuples into a database you point at. We called that database a Write Database (WriteDB) and it behaves as a centralized data source for your authorization system. You can model of your authorization with Permify's DSL - Permify Schema - and perform access checks with a single API call anywhere on your stack. Access decisions made according to stored relational tuples.
  license:
    name: GNU Affero General Public License v3.0
  title: Permify API
  version: v0.0.0-alpha6
paths:
  /permissions/check:
    post:
      consumes:
      - application/json
      description: check subject is authorized
      operationId: permissions.check
      parameters:
      - description: check subject is authorized
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.CheckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permission.CheckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Permission
      tags:
      - Permission
  /permissions/expand:
    post:
      consumes:
      - application/json
      description: expand relationships according to schema
      operationId: permissions.expand
      parameters:
      - description: expand relationships according to schema
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.ExpandRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permission.ExpandResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Permission
      tags:
      - Permission
  /permissions/lookup-query:
    post:
      consumes:
      - application/json
      description: lookupQuery
      operationId: permissions.lookupQuery
      parameters:
      - description: ''''''
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permission.LookupQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permission.LookupQueryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Permission
      tags:
      - Permission
  /relationships/delete:
    post:
      consumes:
      - application/json
      description: delete relation tuple
      operationId: relationships.delete
      parameters:
      - description: delete relation tuple
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/relationship.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tuple.Tuple'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Relationship
      tags:
      - Relationship
  /relationships/read:
    post:
      consumes:
      - application/json
      description: read relation tuple(s)
      operationId: relationships.read
      parameters:
      - description: read relation tuple(s)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/relationship.ReadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tuple.Tuple'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Relationship
      tags:
      - Relationship
  /relationships/write:
    post:
      consumes:
      - application/json
      description: create new relation tuple
      operationId: relationships.write
      parameters:
      - description: create new relation tuple
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/relationship.WriteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tuple.Tuple'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Relationship
      tags:
      - Relationship
  /schemas/lookup:
    post:
      consumes:
      - application/json
      description: lookup your authorization model
      operationId: schemas.lookup
      parameters:
      - description: lookup your authorization model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schema.LookupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.LookupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Schema
      tags:
      - Schema
  /schemas/read:
    post:
      consumes:
      - application/json
      description: read your authorization model
      operationId: schemas.read
      parameters:
      - description: read your authorization model
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schema.ReadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.ReadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Schema
      tags:
      - Schema
  /schemas/write:
    post:
      consumes:
      - application/json
      description: write your authorization model
      operationId: schemas.write
      parameters:
      - description: schema file (expected extension .perm)
        in: body
        name: schema
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.WriteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Schema
      tags:
      - Schema
  /status/ping:
    get:
      consumes:
      - application/json
      operationId: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Server
      tags:
      - Server
  /status/version:
    get:
      consumes:
      - application/json
      operationId: version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPErrorResponse'
      summary: Server
      tags:
      - Server
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: api-key-auth
    type: apiKey
swagger: "2.0"
