package mocks

import (
	"github.com/stretchr/testify/mock"
	"golang.org/x/net/context"

	base "github.com/Permify/permify/pkg/pb/base/v1"
)

// SchemaReader is an autogenerated mock type for the SchemaReader type
type SchemaReader struct {
	mock.Mock
}

// ReadSchema - Reads a new schema from repository
func (_m *SchemaReader) ReadSchema(ctx context.Context, version string) (schema *base.IndexedSchema, err error) {
	ret := _m.Called(version)

	var r0 *base.IndexedSchema
	if rf, ok := ret.Get(0).(func(context.Context, string) *base.IndexedSchema); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Get(0).(*base.IndexedSchema)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, version)
	} else {
		if e, ok := ret.Get(1).(error); ok {
			r1 = e
		} else {
			r1 = nil
		}
	}

	return r0, r1
}

// ReadSchemaDefinition - Reads a Schema Definition from repository
func (_m *SchemaReader) ReadSchemaDefinition(ctx context.Context, entityType string, version string) (definition *base.EntityDefinition, v string, err error) {
	ret := _m.Called(entityType, version)

	var r0 *base.EntityDefinition
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *base.EntityDefinition); ok {
		r0 = rf(ctx, entityType, version)
	} else {
		r0 = ret.Get(0).(*base.EntityDefinition)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, entityType, version)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, entityType, version)
	} else {
		if e, ok := ret.Get(2).(error); ok {
			r2 = e
		} else {
			r2 = nil
		}
	}

	return r0, r1, r2
}

// HeadVersion - Reads the latest version from the repository.
func (_m *SchemaReader) HeadVersion(ctx context.Context) (version string, err error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		if e, ok := ret.Get(1).(error); ok {
			r1 = e
		} else {
			r1 = nil
		}
	}

	return r0, r1
}
