package mocks

import (
	"github.com/stretchr/testify/mock"
	"golang.org/x/net/context"

	"github.com/Permify/permify/internal/entities"
)

// EntityConfigRepository is an autogenerated mock type for the EntityConfigRepository type
type EntityConfigRepository struct {
	mock.Mock
}

func (_m *EntityConfigRepository) Migrate() error {
	return nil
}

// All -
func (_m *EntityConfigRepository) All(ctx context.Context) (configs entities.EntityConfigs, err error) {
	ret := _m.Called()

	var r0 []entities.EntityConfig
	if rf, ok := ret.Get(0).(func(context.Context) []entities.EntityConfig); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).([]entities.EntityConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replace -
func (_m *EntityConfigRepository) Read(ctx context.Context, entityName string) (entities.EntityConfig, error) {
	ret := _m.Called(entityName)

	var r0 entities.EntityConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.EntityConfig); ok {
		r0 = rf(ctx, entityName)
	} else {
		r0 = ret.Get(0).(entities.EntityConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entityName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replace -
func (_m *EntityConfigRepository) Replace(ctx context.Context, configs entities.EntityConfigs) (err error) {
	ret := _m.Called(configs)

	var r0 error
	if rf, ok := ret.Get(1).(func(context.Context, entities.EntityConfigs) error); ok {
		r0 = rf(ctx, configs)
	} else {
		r0 = ret.Error(1)
	}

	return r0
}

// Clear -
func (_m *EntityConfigRepository) Clear(ctx context.Context) (err error) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(1)
	}

	return r0
}
