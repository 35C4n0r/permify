package mocks

import (
	"github.com/stretchr/testify/mock"
	"golang.org/x/net/context"

	"github.com/Permify/permify/internal/repositories"
)

// EntityConfigRepository is an autogenerated mock type for the EntityConfigRepository type
type EntityConfigRepository struct {
	mock.Mock
}

func (_m *EntityConfigRepository) Migrate() error {
	return nil
}

// All -
func (_m *EntityConfigRepository) All(ctx context.Context, version string) (configs []repositories.EntityConfig, err error) {
	ret := _m.Called(version)

	var r0 []repositories.EntityConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) []repositories.EntityConfig); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Get(0).([]repositories.EntityConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, version)
	} else {
		if e, ok := ret.Get(1).(error); ok {
			r1 = e
		} else {
			r1 = nil
		}
	}

	return r0, r1
}

// Replace -
func (_m *EntityConfigRepository) Read(ctx context.Context, entityName string, version string) (repositories.EntityConfig, error) {
	ret := _m.Called(entityName, version)

	var r0 repositories.EntityConfig
	if rf, ok := ret.Get(0).(func(context.Context, string, string) repositories.EntityConfig); ok {
		r0 = rf(ctx, entityName, version)
	} else {
		r0 = ret.Get(0).(repositories.EntityConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityName, version)
	} else {
		if e, ok := ret.Get(1).(error); ok {
			r1 = e
		} else {
			r1 = nil
		}
	}

	return r0, r1
}

// Write -
func (_m *EntityConfigRepository) Write(ctx context.Context, configs []repositories.EntityConfig, version string) (err error) {
	ret := _m.Called(configs, version)

	var r0 error
	if rf, ok := ret.Get(1).(func(context.Context, []repositories.EntityConfig, string) error); ok {
		r0 = rf(ctx, configs, version)
	} else {
		if e, ok := ret.Get(1).(error); ok {
			r0 = e
		} else {
			r0 = nil
		}
	}

	return r0
}
