package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/Permify/permify/internal/entities"
)

// RelationTupleRepository is an autogenerated mock type for the RelationTupleRepository type
type RelationTupleRepository struct {
	mock.Mock
}

func (_m *RelationTupleRepository) Migrate() error {
	return nil
}

// QueryTuples -
func (_m *RelationTupleRepository) QueryTuples(ctx context.Context, namespace string, objectID string, relation string) (tuples []entities.RelationTuple, err error) {
	ret := _m.Called(namespace, objectID, relation)

	var r0 []entities.RelationTuple
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []entities.RelationTuple); ok {
		r0 = rf(ctx, namespace, objectID, relation)
	} else {
		r0 = ret.Get(0).([]entities.RelationTuple)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, objectID, relation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write -
func (_m *RelationTupleRepository) Write(ctx context.Context, tuples []entities.RelationTuple) (err error) {
	ret := _m.Called(tuples)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entities.RelationTuple) error); ok {
		r0 = rf(ctx, tuples)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete -
func (_m *RelationTupleRepository) Delete(ctx context.Context, tuples []entities.RelationTuple) (err error) {
	ret := _m.Called(tuples)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entities.RelationTuple) error); ok {
		r0 = rf(ctx, tuples)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
