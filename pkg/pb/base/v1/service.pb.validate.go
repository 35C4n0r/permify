// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	if m.GetEntity() == nil {
		return CheckRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetAction()) > 64 {
		return CheckRequestValidationError{
			field:  "Action",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_CheckRequest_Action_Pattern.MatchString(m.GetAction()) {
		return CheckRequestValidationError{
			field:  "Action",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	if m.GetSubject() == nil {
		return CheckRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetDepth(); wrapper != nil {

		if wrapper.GetValue() < 3 {
			return CheckRequestValidationError{
				field:  "Depth",
				reason: "value must be greater than or equal to 3",
			}
		}

	}

	return nil
}

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

var _CheckRequest_Action_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CheckResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Can

	for key, val := range m.GetDecisions() {
		_ = val

		// no validation rules for Decisions[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResponseValidationError{
					field:  fmt.Sprintf("Decisions[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RemainingDepth

	return nil
}

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on ExpandRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExpandRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	if m.GetEntity() == nil {
		return ExpandRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpandRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAction() != "" {

		if len(m.GetAction()) > 64 {
			return ExpandRequestValidationError{
				field:  "Action",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_ExpandRequest_Action_Pattern.MatchString(m.GetAction()) {
			return ExpandRequestValidationError{
				field:  "Action",
				reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
			}
		}

	}

	return nil
}

// ExpandRequestValidationError is the validation error returned by
// ExpandRequest.Validate if the designated constraints aren't met.
type ExpandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandRequestValidationError) ErrorName() string { return "ExpandRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExpandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandRequestValidationError{}

var _ExpandRequest_Action_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on ExpandResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ExpandResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTree()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpandResponseValidationError{
				field:  "Tree",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ExpandResponseValidationError is the validation error returned by
// ExpandResponse.Validate if the designated constraints aren't met.
type ExpandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandResponseValidationError) ErrorName() string { return "ExpandResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExpandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandResponseValidationError{}

// Validate checks the field values on LookupQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LookupQueryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	if len(m.GetEntityType()) > 64 {
		return LookupQueryRequestValidationError{
			field:  "EntityType",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_LookupQueryRequest_EntityType_Pattern.MatchString(m.GetEntityType()) {
		return LookupQueryRequestValidationError{
			field:  "EntityType",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	if len(m.GetAction()) > 64 {
		return LookupQueryRequestValidationError{
			field:  "Action",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_LookupQueryRequest_Action_Pattern.MatchString(m.GetAction()) {
		return LookupQueryRequestValidationError{
			field:  "Action",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	if m.GetSubject() == nil {
		return LookupQueryRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookupQueryRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LookupQueryRequestValidationError is the validation error returned by
// LookupQueryRequest.Validate if the designated constraints aren't met.
type LookupQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupQueryRequestValidationError) ErrorName() string {
	return "LookupQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookupQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupQueryRequestValidationError{}

var _LookupQueryRequest_EntityType_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

var _LookupQueryRequest_Action_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on LookupQueryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LookupQueryResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Query

	return nil
}

// LookupQueryResponseValidationError is the validation error returned by
// LookupQueryResponse.Validate if the designated constraints aren't met.
type LookupQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupQueryResponseValidationError) ErrorName() string {
	return "LookupQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookupQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupQueryResponseValidationError{}

// Validate checks the field values on SchemaWriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Schema

	return nil
}

// SchemaWriteRequestValidationError is the validation error returned by
// SchemaWriteRequest.Validate if the designated constraints aren't met.
type SchemaWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaWriteRequestValidationError) ErrorName() string {
	return "SchemaWriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaWriteRequestValidationError{}

// Validate checks the field values on SchemaWriteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	return nil
}

// SchemaWriteResponseValidationError is the validation error returned by
// SchemaWriteResponse.Validate if the designated constraints aren't met.
type SchemaWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaWriteResponseValidationError) ErrorName() string {
	return "SchemaWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaWriteResponseValidationError{}

// Validate checks the field values on SchemaReadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SchemaReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	return nil
}

// SchemaReadRequestValidationError is the validation error returned by
// SchemaReadRequest.Validate if the designated constraints aren't met.
type SchemaReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaReadRequestValidationError) ErrorName() string {
	return "SchemaReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaReadRequestValidationError{}

// Validate checks the field values on SchemaReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaReadResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SchemaReadResponseValidationError is the validation error returned by
// SchemaReadResponse.Validate if the designated constraints aren't met.
type SchemaReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaReadResponseValidationError) ErrorName() string {
	return "SchemaReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaReadResponseValidationError{}

// Validate checks the field values on SchemaLookupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaLookupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	if len(m.GetEntityType()) > 64 {
		return SchemaLookupRequestValidationError{
			field:  "EntityType",
			reason: "value length must be at most 64 bytes",
		}
	}

	if !_SchemaLookupRequest_EntityType_Pattern.MatchString(m.GetEntityType()) {
		return SchemaLookupRequestValidationError{
			field:  "EntityType",
			reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
		}
	}

	return nil
}

// SchemaLookupRequestValidationError is the validation error returned by
// SchemaLookupRequest.Validate if the designated constraints aren't met.
type SchemaLookupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaLookupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaLookupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaLookupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaLookupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaLookupRequestValidationError) ErrorName() string {
	return "SchemaLookupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaLookupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaLookupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaLookupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaLookupRequestValidationError{}

var _SchemaLookupRequest_EntityType_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on SchemaLookupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SchemaLookupResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SchemaLookupResponseValidationError is the validation error returned by
// SchemaLookupResponse.Validate if the designated constraints aren't met.
type SchemaLookupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaLookupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaLookupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaLookupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaLookupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaLookupResponseValidationError) ErrorName() string {
	return "SchemaLookupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaLookupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaLookupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaLookupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaLookupResponseValidationError{}

// Validate checks the field values on RelationshipWriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipWriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SchemaVersion

	if m.GetEntity() == nil {
		return RelationshipWriteRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipWriteRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRelation() != "" {

		if len(m.GetRelation()) > 64 {
			return RelationshipWriteRequestValidationError{
				field:  "Relation",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_RelationshipWriteRequest_Relation_Pattern.MatchString(m.GetRelation()) {
			return RelationshipWriteRequestValidationError{
				field:  "Relation",
				reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
			}
		}

	}

	if m.GetSubject() == nil {
		return RelationshipWriteRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipWriteRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RelationshipWriteRequestValidationError is the validation error returned by
// RelationshipWriteRequest.Validate if the designated constraints aren't met.
type RelationshipWriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipWriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipWriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipWriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipWriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipWriteRequestValidationError) ErrorName() string {
	return "RelationshipWriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipWriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipWriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipWriteRequestValidationError{}

var _RelationshipWriteRequest_Relation_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on RelationshipWriteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipWriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTuple()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipWriteResponseValidationError{
				field:  "Tuple",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RelationshipWriteResponseValidationError is the validation error returned by
// RelationshipWriteResponse.Validate if the designated constraints aren't met.
type RelationshipWriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipWriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipWriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipWriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipWriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipWriteResponseValidationError) ErrorName() string {
	return "RelationshipWriteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipWriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipWriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipWriteResponseValidationError{}

// Validate checks the field values on RelationshipReadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipReadRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipReadRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RelationshipReadRequestValidationError is the validation error returned by
// RelationshipReadRequest.Validate if the designated constraints aren't met.
type RelationshipReadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipReadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipReadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipReadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipReadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipReadRequestValidationError) ErrorName() string {
	return "RelationshipReadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipReadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipReadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipReadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipReadRequestValidationError{}

// Validate checks the field values on RelationshipReadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipReadResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTuples() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RelationshipReadResponseValidationError{
					field:  fmt.Sprintf("Tuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RelationshipReadResponseValidationError is the validation error returned by
// RelationshipReadResponse.Validate if the designated constraints aren't met.
type RelationshipReadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipReadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipReadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipReadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipReadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipReadResponseValidationError) ErrorName() string {
	return "RelationshipReadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipReadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipReadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipReadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipReadResponseValidationError{}

// Validate checks the field values on RelationshipDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipDeleteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetEntity() == nil {
		return RelationshipDeleteRequestValidationError{
			field:  "Entity",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipDeleteRequestValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRelation() != "" {

		if len(m.GetRelation()) > 64 {
			return RelationshipDeleteRequestValidationError{
				field:  "Relation",
				reason: "value length must be at most 64 bytes",
			}
		}

		if !_RelationshipDeleteRequest_Relation_Pattern.MatchString(m.GetRelation()) {
			return RelationshipDeleteRequestValidationError{
				field:  "Relation",
				reason: "value does not match regex pattern \"^([a-z][a-z0-9_]{1,62}[a-z0-9])$\"",
			}
		}

	}

	if m.GetSubject() == nil {
		return RelationshipDeleteRequestValidationError{
			field:  "Subject",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipDeleteRequestValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RelationshipDeleteRequestValidationError is the validation error returned by
// RelationshipDeleteRequest.Validate if the designated constraints aren't met.
type RelationshipDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipDeleteRequestValidationError) ErrorName() string {
	return "RelationshipDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipDeleteRequestValidationError{}

var _RelationshipDeleteRequest_Relation_Pattern = regexp.MustCompile("^([a-z][a-z0-9_]{1,62}[a-z0-9])$")

// Validate checks the field values on RelationshipDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RelationshipDeleteResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTuple()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RelationshipDeleteResponseValidationError{
				field:  "Tuple",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RelationshipDeleteResponseValidationError is the validation error returned
// by RelationshipDeleteResponse.Validate if the designated constraints aren't met.
type RelationshipDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationshipDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationshipDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationshipDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationshipDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationshipDeleteResponseValidationError) ErrorName() string {
	return "RelationshipDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationshipDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationshipDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationshipDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationshipDeleteResponseValidationError{}
