// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: base/v1/service.proto

package basev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionAPIClient is the client API for PermissionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionAPIClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (*ExpandResponse, error)
	LookupQuery(ctx context.Context, in *LookupQueryRequest, opts ...grpc.CallOption) (*LookupQueryResponse, error)
}

type permissionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionAPIClient(cc grpc.ClientConnInterface) PermissionAPIClient {
	return &permissionAPIClient{cc}
}

func (c *permissionAPIClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/base.v1.PermissionAPI/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionAPIClient) Expand(ctx context.Context, in *ExpandRequest, opts ...grpc.CallOption) (*ExpandResponse, error) {
	out := new(ExpandResponse)
	err := c.cc.Invoke(ctx, "/base.v1.PermissionAPI/Expand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionAPIClient) LookupQuery(ctx context.Context, in *LookupQueryRequest, opts ...grpc.CallOption) (*LookupQueryResponse, error) {
	out := new(LookupQueryResponse)
	err := c.cc.Invoke(ctx, "/base.v1.PermissionAPI/LookupQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionAPIServer is the server API for PermissionAPI service.
// All implementations must embed UnimplementedPermissionAPIServer
// for forward compatibility
type PermissionAPIServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	Expand(context.Context, *ExpandRequest) (*ExpandResponse, error)
	LookupQuery(context.Context, *LookupQueryRequest) (*LookupQueryResponse, error)
	mustEmbedUnimplementedPermissionAPIServer()
}

// UnimplementedPermissionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionAPIServer struct {
}

func (UnimplementedPermissionAPIServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedPermissionAPIServer) Expand(context.Context, *ExpandRequest) (*ExpandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expand not implemented")
}
func (UnimplementedPermissionAPIServer) LookupQuery(context.Context, *LookupQueryRequest) (*LookupQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupQuery not implemented")
}
func (UnimplementedPermissionAPIServer) mustEmbedUnimplementedPermissionAPIServer() {}

// UnsafePermissionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionAPIServer will
// result in compilation errors.
type UnsafePermissionAPIServer interface {
	mustEmbedUnimplementedPermissionAPIServer()
}

func RegisterPermissionAPIServer(s grpc.ServiceRegistrar, srv PermissionAPIServer) {
	s.RegisterService(&PermissionAPI_ServiceDesc, srv)
}

func _PermissionAPI_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionAPIServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.PermissionAPI/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionAPIServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionAPI_Expand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionAPIServer).Expand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.PermissionAPI/Expand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionAPIServer).Expand(ctx, req.(*ExpandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionAPI_LookupQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionAPIServer).LookupQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.PermissionAPI/LookupQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionAPIServer).LookupQuery(ctx, req.(*LookupQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionAPI_ServiceDesc is the grpc.ServiceDesc for PermissionAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.PermissionAPI",
	HandlerType: (*PermissionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _PermissionAPI_Check_Handler,
		},
		{
			MethodName: "Expand",
			Handler:    _PermissionAPI_Expand_Handler,
		},
		{
			MethodName: "LookupQuery",
			Handler:    _PermissionAPI_LookupQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/v1/service.proto",
}

// SchemaAPIClient is the client API for SchemaAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaAPIClient interface {
	Write(ctx context.Context, in *SchemaWriteRequest, opts ...grpc.CallOption) (*SchemaWriteResponse, error)
	Read(ctx context.Context, in *SchemaReadRequest, opts ...grpc.CallOption) (*SchemaReadResponse, error)
	Lookup(ctx context.Context, in *SchemaLookupRequest, opts ...grpc.CallOption) (*SchemaLookupResponse, error)
}

type schemaAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaAPIClient(cc grpc.ClientConnInterface) SchemaAPIClient {
	return &schemaAPIClient{cc}
}

func (c *schemaAPIClient) Write(ctx context.Context, in *SchemaWriteRequest, opts ...grpc.CallOption) (*SchemaWriteResponse, error) {
	out := new(SchemaWriteResponse)
	err := c.cc.Invoke(ctx, "/base.v1.SchemaAPI/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaAPIClient) Read(ctx context.Context, in *SchemaReadRequest, opts ...grpc.CallOption) (*SchemaReadResponse, error) {
	out := new(SchemaReadResponse)
	err := c.cc.Invoke(ctx, "/base.v1.SchemaAPI/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaAPIClient) Lookup(ctx context.Context, in *SchemaLookupRequest, opts ...grpc.CallOption) (*SchemaLookupResponse, error) {
	out := new(SchemaLookupResponse)
	err := c.cc.Invoke(ctx, "/base.v1.SchemaAPI/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaAPIServer is the server API for SchemaAPI service.
// All implementations must embed UnimplementedSchemaAPIServer
// for forward compatibility
type SchemaAPIServer interface {
	Write(context.Context, *SchemaWriteRequest) (*SchemaWriteResponse, error)
	Read(context.Context, *SchemaReadRequest) (*SchemaReadResponse, error)
	Lookup(context.Context, *SchemaLookupRequest) (*SchemaLookupResponse, error)
	mustEmbedUnimplementedSchemaAPIServer()
}

// UnimplementedSchemaAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaAPIServer struct {
}

func (UnimplementedSchemaAPIServer) Write(context.Context, *SchemaWriteRequest) (*SchemaWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedSchemaAPIServer) Read(context.Context, *SchemaReadRequest) (*SchemaReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSchemaAPIServer) Lookup(context.Context, *SchemaLookupRequest) (*SchemaLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedSchemaAPIServer) mustEmbedUnimplementedSchemaAPIServer() {}

// UnsafeSchemaAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaAPIServer will
// result in compilation errors.
type UnsafeSchemaAPIServer interface {
	mustEmbedUnimplementedSchemaAPIServer()
}

func RegisterSchemaAPIServer(s grpc.ServiceRegistrar, srv SchemaAPIServer) {
	s.RegisterService(&SchemaAPI_ServiceDesc, srv)
}

func _SchemaAPI_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaAPIServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.SchemaAPI/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaAPIServer).Write(ctx, req.(*SchemaWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaAPI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaAPIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.SchemaAPI/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaAPIServer).Read(ctx, req.(*SchemaReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaAPI_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaAPIServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.SchemaAPI/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaAPIServer).Lookup(ctx, req.(*SchemaLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaAPI_ServiceDesc is the grpc.ServiceDesc for SchemaAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.SchemaAPI",
	HandlerType: (*SchemaAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _SchemaAPI_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _SchemaAPI_Read_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _SchemaAPI_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/v1/service.proto",
}

// RelationshipAPIClient is the client API for RelationshipAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationshipAPIClient interface {
	Write(ctx context.Context, in *RelationshipWriteRequest, opts ...grpc.CallOption) (*RelationshipWriteResponse, error)
	Read(ctx context.Context, in *RelationshipReadRequest, opts ...grpc.CallOption) (*RelationshipReadResponse, error)
	Delete(ctx context.Context, in *RelationshipDeleteRequest, opts ...grpc.CallOption) (*RelationshipDeleteResponse, error)
}

type relationshipAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationshipAPIClient(cc grpc.ClientConnInterface) RelationshipAPIClient {
	return &relationshipAPIClient{cc}
}

func (c *relationshipAPIClient) Write(ctx context.Context, in *RelationshipWriteRequest, opts ...grpc.CallOption) (*RelationshipWriteResponse, error) {
	out := new(RelationshipWriteResponse)
	err := c.cc.Invoke(ctx, "/base.v1.RelationshipAPI/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipAPIClient) Read(ctx context.Context, in *RelationshipReadRequest, opts ...grpc.CallOption) (*RelationshipReadResponse, error) {
	out := new(RelationshipReadResponse)
	err := c.cc.Invoke(ctx, "/base.v1.RelationshipAPI/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipAPIClient) Delete(ctx context.Context, in *RelationshipDeleteRequest, opts ...grpc.CallOption) (*RelationshipDeleteResponse, error) {
	out := new(RelationshipDeleteResponse)
	err := c.cc.Invoke(ctx, "/base.v1.RelationshipAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationshipAPIServer is the server API for RelationshipAPI service.
// All implementations must embed UnimplementedRelationshipAPIServer
// for forward compatibility
type RelationshipAPIServer interface {
	Write(context.Context, *RelationshipWriteRequest) (*RelationshipWriteResponse, error)
	Read(context.Context, *RelationshipReadRequest) (*RelationshipReadResponse, error)
	Delete(context.Context, *RelationshipDeleteRequest) (*RelationshipDeleteResponse, error)
	mustEmbedUnimplementedRelationshipAPIServer()
}

// UnimplementedRelationshipAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRelationshipAPIServer struct {
}

func (UnimplementedRelationshipAPIServer) Write(context.Context, *RelationshipWriteRequest) (*RelationshipWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRelationshipAPIServer) Read(context.Context, *RelationshipReadRequest) (*RelationshipReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRelationshipAPIServer) Delete(context.Context, *RelationshipDeleteRequest) (*RelationshipDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRelationshipAPIServer) mustEmbedUnimplementedRelationshipAPIServer() {}

// UnsafeRelationshipAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationshipAPIServer will
// result in compilation errors.
type UnsafeRelationshipAPIServer interface {
	mustEmbedUnimplementedRelationshipAPIServer()
}

func RegisterRelationshipAPIServer(s grpc.ServiceRegistrar, srv RelationshipAPIServer) {
	s.RegisterService(&RelationshipAPI_ServiceDesc, srv)
}

func _RelationshipAPI_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipAPIServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.RelationshipAPI/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipAPIServer).Write(ctx, req.(*RelationshipWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipAPI_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipAPIServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.RelationshipAPI/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipAPIServer).Read(ctx, req.(*RelationshipReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationshipDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.v1.RelationshipAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipAPIServer).Delete(ctx, req.(*RelationshipDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationshipAPI_ServiceDesc is the grpc.ServiceDesc for RelationshipAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationshipAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.v1.RelationshipAPI",
	HandlerType: (*RelationshipAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _RelationshipAPI_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _RelationshipAPI_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RelationshipAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/v1/service.proto",
}
